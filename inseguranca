	A melhor proteção para XSS está na combinação de validação de “lista branca” de todos os dados de entrada e recodificação apropriada de todos os dados de entrada. A validação habilita a detecção de ataques e a recodificação previne qualquer injeção de script bem sucedida de ser executada no navegador. A prevenção de XSS ao longo da aplicação como um todo requer uma abordagem arquitetural consistente.

• Validação de entrada: utilize mecanismo padrão de validação de entrada para validar todas as entradas quanto ao tamanho, tipo, sintaxe e regras de negócio antes de aceitar que o dado seja mostrado ou armazenado. Use uma estratégia de validação “aceite o conhecido como bom”. Rejeite entrada inválida ao invés da tentativa de corrigir dados potencialmente hostis. Não se esqueça que as mensagens de erro podem também incluir dados inválidos.
• Forte codificação de saída: garanta que qualquer dado de entrada do usuário esteja apropriadamente codificado (tanto para HTML ou XML dependendo do mecanismo de saída) antes da renderização, usando a abordagem de codificação de todos os caracteres, com exceção de um subconjunto muito limitado. Esta é a abordagem da biblioteca Microsoft Anti-XSS e a biblioteca prevista OWASP PHP Anti-XSS. Adicionalmente, configure a codificação de caracteres para cada página a ser produzida como saída, que diminuirá a exposição a algumas variações.
• Especifique a codificação de saída (como ISO 8859-1 ou UTF-8): Não permita que o atacante escolha isso para seus usuários.
• Não use validação de “lista negra” para detectar XSS na entrada ou codificação de saída. A procura ou troca de poucos caracteres ("<" ">" e outros caracteres similares ou frases como “script”) é fraco e tem sido explorado com sucesso. Mesmo uma tag “<b>” não verificada é insegura em alguns contextos. O XSS possui um conjunto surpreendente de variantes que torna simples ultrapassar validações de “lista negra” (Blacklist).
• Cuidado com os erros de conversão, as entradas devem ser decodificadas e convertidas para a representação interna corrente antes de ser validada. Certifique-se que sua aplicação não decodifica a mesma entrada duas vezes. Tais erros podem ser usados para ultrapassar esquemas de “lista branca” pela introdução de entradas perigosas após serem checados.
